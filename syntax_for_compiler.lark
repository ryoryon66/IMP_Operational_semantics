start:com

    aexp: term
        | aexp "+" term    -> add
        | aexp "-" term    -> sub

    term: factor
        | term "*" factor  -> mul // only supported for interpreter

    factor : atom 
           | factor ">>" NUM -> rshift
           | factor "<<" NUM -> lshift 

    atom: NUM
          | "bin:" BINARY
          | VAR
          | VAR  "(" (aexp ( "," aexp)* (",")?)?   ")"  -> call
          | "(" aexp ")"
          | "<input>" -> input // only supported for compiler
          | "\""  CHAR "\"" 
          | "*" aexp -> ptr_read

    bexp: band
        | bexp "or" band   -> or
    
    band: bnot
        | band "and" bnot  -> and
    
    bnot:  batom
        | "not" bnot       -> not
    
    batom: TRUE 
        | FALSE 
        | aexp "<=" aexp -> le
        | aexp ">=" aexp -> ge 
        | aexp "<" aexp -> lt 
        | aexp ">" aexp -> gt 
        | aexp "=" aexp -> eq
        | "(" bexp ")"

    com: SKIP
        | VAR ":=" aexp              -> assign
        | "*" aexp ":=" aexp ->  ptr_assign
        | com ";" com              -> seq
        | "if" bexp "then" com "else" com "end" -> ifelse
        | "while" bexp "do"  com "end"    -> while
        | "print" aexp              -> print
        | "def" VAR    "(" (VAR ( "," VAR)* (",")?)?   ")" "{" com  "return" aexp "}" -> def
        | "setstr" aexp "\"" (CHAR)* "\"" -> setstr
    
    BLOCKCOMMENT : "$" /(.|\n|\r)+/ "$"  
    

    %import common.CNAME -> NAME
    %import common.INT   -> INT
    %import common.WS
    %ignore WS
    %ignore /(#).*/ //comment


    VAR: /(?!(if|then|else|end|while|do|print|not|and|or|true|false|def|return|bin)\b)[a-zA-Z_]\w*/
    NUM: INT | "-" INT
    // 16bit binary number
    BINARY : /[01]{16}/
    TRUE: "true"
    FALSE: "false"
    SKIP : "skip"
    CHAR : /[a-zA-Z0-9!]/

